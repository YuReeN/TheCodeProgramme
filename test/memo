import numpy as np

def create_cipher_table(key):
    key = key.lower()
    characters = 'abcdefghijklmnopqrstuvwxyz0123456789'
    table = np.empty((6, 6), dtype='U1')
    key_index = 0
    
    for i in range(6):
        for j in range(6):
            if key_index < len(key):
                table[i][j] = key[key_index]
                key_index += 1
            else:
                char_index = key_index - len(key)
                table[i][j] = characters[char_index]
                key_index += 1
    
    return table

def decrypt(ciphertext, key, transposition_key):
    table = create_cipher_table(key)
    plaintext = ''
    rows = len(ciphertext) // transposition_key
    
    for i in range(rows):
        for j in range(transposition_key):
            index = i + j * rows
            plaintext += ciphertext[index]
    
    deciphered_ciphertext = ''
    cols = len(plaintext) // 2
    
    for i in range(0, len(plaintext), 2):
        row = 'ADFGVX'.index(plaintext[i])
        col = 'ADFGVX'.index(plaintext[i+1])
        deciphered_ciphertext += table[row][col]
    
    unique_chars = remove_duplicates(deciphered_ciphertext)
    char_to_number = {str(index+1): char for index, char in enumerate(unique_chars)}
    numbers = ''
    
    for char in deciphered_ciphertext:
        numbers += char_to_number[char]
    
    sorted_word = sorted(numbers, key=lambda x: char_to_number[x])
    plaintext = ''.join(sorted_word)
    
    return plaintext

# 例として与えられたデータでテスト
key = 'dhxmu4p3j6aoibzv9w1n70qkfslyc8tr5e2g'
ciphertext = 'DXGAXAAXXVDDFGFX'
transposition_key = 5

plaintext = decrypt(ciphertext, key, transposition_key)
print("復号化された平文:", plaintext)
